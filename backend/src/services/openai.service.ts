const axios = require('axios');
require('dotenv').config();

const functions = [
  {
    name: "suggest_patient_responses",
    description: "Gera op√ß√µes de resposta para uma crian√ßa responder ao psic√≥logo virtual",
    parameters: {
      type: "object",
      properties: {
        responses: {
          type: "array",
          items: {
            type: "object",
            properties: {
              option: {
                type: "string",
                description: "Letra identificadora da op√ß√£o (A, B, C, D)"
              },
              text: {
                type: "string",
                description: "Texto da resposta da crian√ßa, em linguagem simples"
              }
            },
            required: ["option", "text"]
          },
          minItems: 4,
          maxItems: 4
        }
      },
      required: ["responses"]
    }
  }
];

export const startChat = async (roomId) => {
  //Busca essas vari√°veis pelo roomId

  const finalidade = "primeira consulta";
  const perfil_paciente = "Crian√ßa de 7 anos, t√≠mida, dificuldade em socializar na escola.";
  const restricoes = "N√£o falar sobre separa√ß√£o dos pais.";
  const foco = "emocional e social";
  const historico_previo = "Relato da escola indica epis√≥dios de choro frequente e isolamento durante o recreio.";
  const nome_paciente = "juninho"
  const idade = "10"

  const systemPrompt = `
    Voc√™ √© um psic√≥logo infantil virtual muito gentil, carinhoso e acolhedor. Vai conversar com uma crian√ßa usando linguagem simples, respeitosa e afetuosa. Seu objetivo √© criar um espa√ßo seguro para a crian√ßa se expressar sobre si mesma, seus sentimentos, seu corpo e sua rotina ‚Äî sem julgamentos e sem press√£o.

    üìå Informa√ß√µes fornecidas pelo m√©dico:
    - ü©∫ Finalidade da consulta: ${finalidade}
    - üëß Perfil do paciente: ${perfil_paciente}
    - üö´ Restri√ß√µes tem√°ticas: ${restricoes}
    - üéØ Foco da escuta e da coleta: ${foco}
    - üìö Hist√≥rico pr√©vio: ${historico_previo}

    üìå Informa√ß√µes do paciente:
    - Idade: ${idade}.
    - Nome: ${nome_paciente}

    üí° Instru√ß√µes para voc√™:
    - Acolha e se adapte √†s informa√ß√µes acima.
    - Se a crian√ßa parecer t√≠mida, diga: ‚ÄúPode me contar no seu tempo, t√° bom? T√¥ aqui pra te ouvir com calma.‚Äù
    - Fa√ßa perguntas com carinho e sem pressa.
    - Nunca pressione.
    - Evite os temas listados em "restricoes".
    - Foque nos temas listados em "foco".
    - Considere o "historico_previo" com sensibilidade, se √∫til.

    üí¨ Frases de apoio que voc√™ pode usar quando fizer sentido:
    - ‚ÄúVoc√™ est√° indo muito bem, t√° bom?‚Äù
    - ‚ÄúObrigada por me contar isso, √© importante.‚Äù
    - ‚ÄúSe voc√™ n√£o souber ou n√£o quiser responder, tudo bem tamb√©m.‚Äù
    - ‚ÄúPode me contar do seu jeitinho. N√£o existe resposta errada.‚Äù

    üß∏ Inicie a conversa com base nesse roteiro:
    1. Oi! Qual √© o seu nome? E quantos aninhos voc√™ tem?
    2. Sabe me dizer por que est√° aqui hoje conversando comigo? Algu√©m te falou o motivo?
    3. Tem algo diferente com voc√™ esses dias? Tipo ficar doentinho, sentir dor ou chateado com alguma coisa?
    4. Voc√™ j√° ficou bem dod√≥i? Ou j√° precisou ir para o m√©dico, tomar rem√©dio ou ficar no hospital?
    5. Algu√©m j√° te contou como foi quando voc√™ nasceu? Tipo se foi ces√°rea, parto normal‚Ä¶?
    6. Voc√™ come de tudo ou tem comida que voc√™ n√£o gosta nem de olhar? Me conta!
    7. Voc√™ j√° tomou vacinas? Aquelas que doem um pouquinho mas ajudam a gente a n√£o ficar doente?
    8. Voc√™ lembra quando aprendeu a andar ou falar? Algu√©m te contou ou voc√™ lembra?
    9. Voc√™ vai pra escola ou creche? Gosta de ir? O que mais gosta de fazer l√°?
    10. Como t√° seu cora√ß√£ozinho hoje? T√° tranquilo, feliz ou meio apertado?

    üéØ Seu objetivo final √©:
    - Criar v√≠nculo afetivo com a crian√ßa.
    - Coletar informa√ß√µes sobre aspectos ${foco} (e outros, se surgirem).
    - Nunca diagnostique. Apenas ou√ßa, acolha e registre.
    - Ao final, gere um resumo compreens√≠vel e estruturado para o profissional de sa√∫de, com base no que a crian√ßa relatou.
    `;
    console.log("üöÄ ~ startChat ~ systemPrompt:", systemPrompt)
    
    try {
        const responseMessage = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: 'Envie a primeira mensagem, o paciente acabou de chegar, cumprimente-o e de as boas vindas e pergunte como ele est√°.' },
            ]
            },
            {
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json',
            },
            }
        );

        const reply = responseMessage.data.choices[0].message.content;
        console.log("üöÄ ~ startChat ~ reply:", reply)

        // Gravar reply no history da consutla
        const responses = await generateOptions(reply);
        

            return { reply, choices: responses };
    } catch (error) {
        console.log("üöÄ ~ startChat ~ error:", error)
    }
};

export const sendMessage = async (history, message) => {
    try {
        const messages = [
            ...history,
            { role: 'user', content: message.toString() }
        ]
        console.log("üöÄ ~ sendMessage ~ messages:", messages)
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-4o',
          messages
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const reply = response.data.choices[0].message.content;
      console.log("üöÄ ~ sendMessage ~ reply:", reply)
    } catch (err) {
      console.error('Erro ao chamar OpenAI', err);
    }
};

const generateOptions = async (originalMessage) => {
    try {
    const responseChoices = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
            model: 'gpt-4o',
            messages: [
            {
                role: 'user',
                content: `Considere a seguinte resposta do psic√≥logo: "${originalMessage}".
                    Gere 4 op√ß√µes de resposta poss√≠veis para a crian√ßa, em linguagem simples e amig√°vel.
                    Elas podem ser positivas ou negativas, dependendo do contexto.
                    Adicione emoji em todas elas
                `
            }
            ],
            functions: functions,
            function_call: { name: "suggest_patient_responses" }
        },
        {
            headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
            },
        }
        );

        const parsedFunctionCall = JSON.parse(responseChoices.data.choices[0].message.function_call.arguments);
        return parsedFunctionCall.responses
    } catch (error) {
        console.log("üöÄ ~ generateOptions ~ error:", error)
    }
}
